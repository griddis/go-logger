package logging

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net"
	"net/http"
	"time"
)

func NewWrapResponseWriter(w http.ResponseWriter, protoMajor int) WrapResponseWriter {
	_, fl := w.(http.Flusher)

	bw := logWriter{ResponseWriter: w}

	if protoMajor == 2 {
		_, ps := w.(http.Pusher)
		if fl || ps {
			return &http2FancyWriter{bw}
		}
	} else {
		_, hj := w.(http.Hijacker)
		_, rf := w.(io.ReaderFrom)
		if fl || hj || rf {
			return &httpFancyWriter{bw}
		}
	}

	return &bw
}

type logWriter struct {
	http.ResponseWriter
	wroteHeader bool
	code        int
	bytes       int
	tee         io.Writer
}

func (b *logWriter) WriteHeader(code int) {
	if !b.wroteHeader {
		b.code = code
		b.wroteHeader = true
		b.ResponseWriter.WriteHeader(code)
	}
}

func (b *logWriter) Write(buf []byte) (int, error) {
	b.maybeWriteHeader()
	n, err := b.ResponseWriter.Write(buf)
	if b.tee != nil {
		_, err2 := b.tee.Write(buf[:n])
		// Prefer errors generated by the proxied writer.
		if err == nil {
			err = err2
		}
	}
	b.bytes += n
	return n, err
}

func (b *logWriter) maybeWriteHeader() {
	if !b.wroteHeader {
		b.WriteHeader(http.StatusOK)
	}
}

func (b *logWriter) Status() int {
	return b.code
}

func (b *logWriter) BytesWritten() int {
	return b.bytes
}

func (b *logWriter) Tee(w io.Writer) {
	b.tee = w
}

func (b *logWriter) Unwrap() http.ResponseWriter {
	return b.ResponseWriter
}

type WrapResponseWriter interface {
	http.ResponseWriter
	// Status returns the HTTP status of the request, or 0 if one has not
	// yet been sent.
	Status() int
	// BytesWritten returns the total number of bytes sent to the client.
	BytesWritten() int
	// Tee causes the response body to be written to the given io.Writer in
	// addition to proxying the writes through. Only one io.Writer can be
	// tee'd to at once: setting a second one will overwrite the first.
	// Writes will be sent to the proxy before being written to this
	// io.Writer. It is illegal for the tee'd writer to be modified
	// concurrently with writes.
	Tee(io.Writer)
	// Unwrap returns the original proxied target.
	Unwrap() http.ResponseWriter
}

func (s *logger) ChiRequestLogger() func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		fn := func(w http.ResponseWriter, r *http.Request) {
			//ww := middleware.NewWrapResponseWriter(w, r.ProtoMajor)

			ww := NewWrapResponseWriter(w, r.ProtoMajor)
			// Request
			reqBody := []byte{}
			if r.Body != nil {
				reqBody, _ = io.ReadAll(r.Body)
			}
			r.Body = io.NopCloser(bytes.NewBuffer(reqBody))

			body := new(bytes.Buffer)
			if len(reqBody) != 0 {
				if err := json.Compact(body, reqBody); err != nil {
					s.Error("json.Compact", "error", err)
				}
			}

			t1 := time.Now()
			defer func() {
				s.Info(r.URL.Path,
					"proto",
					r.Proto,
					"status",
					ww.Status(),
					"bytes",
					fmt.Sprintf("%d", ww.BytesWritten()),
					"duration",
					time.Since(t1),
				)

				s.Debug(r.URL.Path,
					"reqHeaders",
					fmt.Sprintf("%+v", r.Header),
					"respHeaders",
					fmt.Sprintf("%+v", ww.Header()),
					"reqBody",
					body.String(),
				)
			}()

			next.ServeHTTP(ww, r)
		}
		return http.HandlerFunc(fn)
	}
}

// httpFancyWriter is a HTTP writer that additionally satisfies
// http.Flusher, http.Hijacker, and io.ReaderFrom. It exists for the common case
// of wrapping the http.ResponseWriter that package http gives you, in order to
// make the proxied object support the full method set of the proxied object.
type httpFancyWriter struct {
	logWriter
}

func (f *httpFancyWriter) Flush() {
	f.wroteHeader = true
	fl := f.logWriter.ResponseWriter.(http.Flusher)
	fl.Flush()
}

func (f *httpFancyWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	hj := f.logWriter.ResponseWriter.(http.Hijacker)
	return hj.Hijack()
}

func (f *httpFancyWriter) ReadFrom(r io.Reader) (int64, error) {
	if f.logWriter.tee != nil {
		n, err := io.Copy(&f.logWriter, r)
		f.logWriter.bytes += int(n)
		return n, err
	}
	rf := f.logWriter.ResponseWriter.(io.ReaderFrom)
	f.logWriter.maybeWriteHeader()
	n, err := rf.ReadFrom(r)
	f.logWriter.bytes += int(n)
	return n, err
}

var _ http.Flusher = &httpFancyWriter{}
var _ http.Hijacker = &httpFancyWriter{}
var _ io.ReaderFrom = &httpFancyWriter{}

// http2FancyWriter is a HTTP2 writer that additionally satisfies
// http.Flusher, and io.ReaderFrom. It exists for the common case
// of wrapping the http.ResponseWriter that package http gives you, in order to
// make the proxied object support the full method set of the proxied object.
type http2FancyWriter struct {
	logWriter
}

func (f *http2FancyWriter) Flush() {
	f.wroteHeader = true
	fl := f.logWriter.ResponseWriter.(http.Flusher)
	fl.Flush()
}

func (f *http2FancyWriter) Push(target string, opts *http.PushOptions) error {
	return f.logWriter.ResponseWriter.(http.Pusher).Push(target, opts)
}

var _ http.Flusher = &http2FancyWriter{}
var _ http.Pusher = &http2FancyWriter{}
